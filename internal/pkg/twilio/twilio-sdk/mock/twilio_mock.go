// Code generated by MockGen. DO NOT EDIT.
// Source: internal/twilio/twilio-sdk/twilio.go

// Package mock_twiliosdk is a generated GoMock package.
package mock_twiliosdk

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openapi "github.com/twilio/twilio-go/rest/studio/v2"
	openapi0 "github.com/twilio/twilio-go/rest/taskrouter/v1"
)

// MockTwilioApi is a mock of TwilioApi interface.
type MockTwilioApi struct {
	ctrl     *gomock.Controller
	recorder *MockTwilioApiMockRecorder
}

// MockTwilioApiMockRecorder is the mock recorder for MockTwilioApi.
type MockTwilioApiMockRecorder struct {
	mock *MockTwilioApi
}

// NewMockTwilioApi creates a new mock instance.
func NewMockTwilioApi(ctrl *gomock.Controller) *MockTwilioApi {
	mock := &MockTwilioApi{ctrl: ctrl}
	mock.recorder = &MockTwilioApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwilioApi) EXPECT() *MockTwilioApiMockRecorder {
	return m.recorder
}

// CreateFlow mocks base method.
func (m *MockTwilioApi) CreateFlow(params *openapi.CreateFlowParams) (*openapi.StudioV2Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlow", params)
	ret0, _ := ret[0].(*openapi.StudioV2Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlow indicates an expected call of CreateFlow.
func (mr *MockTwilioApiMockRecorder) CreateFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlow", reflect.TypeOf((*MockTwilioApi)(nil).CreateFlow), params)
}

// CreateTaskQueue mocks base method.
func (m *MockTwilioApi) CreateTaskQueue(WorkspaceSid string, params *openapi0.CreateTaskQueueParams) (*openapi0.TaskrouterV1TaskQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskQueue", WorkspaceSid, params)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1TaskQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskQueue indicates an expected call of CreateTaskQueue.
func (mr *MockTwilioApiMockRecorder) CreateTaskQueue(WorkspaceSid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskQueue", reflect.TypeOf((*MockTwilioApi)(nil).CreateTaskQueue), WorkspaceSid, params)
}

// CreateWorkflow mocks base method.
func (m *MockTwilioApi) CreateWorkflow(WorkspaceSid string, params *openapi0.CreateWorkflowParams) (*openapi0.TaskrouterV1Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", WorkspaceSid, params)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockTwilioApiMockRecorder) CreateWorkflow(WorkspaceSid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockTwilioApi)(nil).CreateWorkflow), WorkspaceSid, params)
}

// FetchFlow mocks base method.
func (m *MockTwilioApi) FetchFlow(sid string) (*openapi.StudioV2Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFlow", sid)
	ret0, _ := ret[0].(*openapi.StudioV2Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFlow indicates an expected call of FetchFlow.
func (mr *MockTwilioApiMockRecorder) FetchFlow(sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFlow", reflect.TypeOf((*MockTwilioApi)(nil).FetchFlow), sid)
}

// FetchTaskQueue mocks base method.
func (m *MockTwilioApi) FetchTaskQueue(WorkspaceSid, Sid string) (*openapi0.TaskrouterV1TaskQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskQueue", WorkspaceSid, Sid)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1TaskQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskQueue indicates an expected call of FetchTaskQueue.
func (mr *MockTwilioApiMockRecorder) FetchTaskQueue(WorkspaceSid, Sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskQueue", reflect.TypeOf((*MockTwilioApi)(nil).FetchTaskQueue), WorkspaceSid, Sid)
}

// FetchWorkflow mocks base method.
func (m *MockTwilioApi) FetchWorkflow(WorkspaceSid, Sid string) (*openapi0.TaskrouterV1Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWorkflow", WorkspaceSid, Sid)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWorkflow indicates an expected call of FetchWorkflow.
func (mr *MockTwilioApiMockRecorder) FetchWorkflow(WorkspaceSid, Sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWorkflow", reflect.TypeOf((*MockTwilioApi)(nil).FetchWorkflow), WorkspaceSid, Sid)
}

// ListFlow mocks base method.
func (m *MockTwilioApi) ListFlow(params *openapi.ListFlowParams) ([]openapi.StudioV2Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlow", params)
	ret0, _ := ret[0].([]openapi.StudioV2Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlow indicates an expected call of ListFlow.
func (mr *MockTwilioApiMockRecorder) ListFlow(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlow", reflect.TypeOf((*MockTwilioApi)(nil).ListFlow), params)
}

// ListTaskQueue mocks base method.
func (m *MockTwilioApi) ListTaskQueue(WorkspaceSid string, params *openapi0.ListTaskQueueParams) ([]openapi0.TaskrouterV1TaskQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskQueue", WorkspaceSid, params)
	ret0, _ := ret[0].([]openapi0.TaskrouterV1TaskQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskQueue indicates an expected call of ListTaskQueue.
func (mr *MockTwilioApiMockRecorder) ListTaskQueue(WorkspaceSid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskQueue", reflect.TypeOf((*MockTwilioApi)(nil).ListTaskQueue), WorkspaceSid, params)
}

// ListWorkflow mocks base method.
func (m *MockTwilioApi) ListWorkflow(WorkspaceSid string, params *openapi0.ListWorkflowParams) ([]openapi0.TaskrouterV1Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflow", WorkspaceSid, params)
	ret0, _ := ret[0].([]openapi0.TaskrouterV1Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflow indicates an expected call of ListWorkflow.
func (mr *MockTwilioApiMockRecorder) ListWorkflow(WorkspaceSid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflow", reflect.TypeOf((*MockTwilioApi)(nil).ListWorkflow), WorkspaceSid, params)
}

// ListWorkspace mocks base method.
func (m *MockTwilioApi) ListWorkspace(params *openapi0.ListWorkspaceParams) ([]openapi0.TaskrouterV1Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspace", params)
	ret0, _ := ret[0].([]openapi0.TaskrouterV1Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspace indicates an expected call of ListWorkspace.
func (mr *MockTwilioApiMockRecorder) ListWorkspace(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspace", reflect.TypeOf((*MockTwilioApi)(nil).ListWorkspace), params)
}

// UpdateFlow mocks base method.
func (m *MockTwilioApi) UpdateFlow(sid string, params *openapi.UpdateFlowParams) (*openapi.StudioV2Flow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlow", sid, params)
	ret0, _ := ret[0].(*openapi.StudioV2Flow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlow indicates an expected call of UpdateFlow.
func (mr *MockTwilioApiMockRecorder) UpdateFlow(sid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlow", reflect.TypeOf((*MockTwilioApi)(nil).UpdateFlow), sid, params)
}

// UpdateTaskQueue mocks base method.
func (m *MockTwilioApi) UpdateTaskQueue(WorkspaceSid, Sid string, params *openapi0.UpdateTaskQueueParams) (*openapi0.TaskrouterV1TaskQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskQueue", WorkspaceSid, Sid, params)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1TaskQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskQueue indicates an expected call of UpdateTaskQueue.
func (mr *MockTwilioApiMockRecorder) UpdateTaskQueue(WorkspaceSid, Sid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskQueue", reflect.TypeOf((*MockTwilioApi)(nil).UpdateTaskQueue), WorkspaceSid, Sid, params)
}

// UpdateWorkflow mocks base method.
func (m *MockTwilioApi) UpdateWorkflow(WorkspaceSid, Sid string, params *openapi0.UpdateWorkflowParams) (*openapi0.TaskrouterV1Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", WorkspaceSid, Sid, params)
	ret0, _ := ret[0].(*openapi0.TaskrouterV1Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockTwilioApiMockRecorder) UpdateWorkflow(WorkspaceSid, Sid, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockTwilioApi)(nil).UpdateWorkflow), WorkspaceSid, Sid, params)
}
